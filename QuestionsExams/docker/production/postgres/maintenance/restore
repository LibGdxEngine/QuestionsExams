#!/usr/bin/env bash

set -o errexit

set -o pipefail

set -o nounset

working_dir="$(dirname ${0})"

source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

if [[ -z ${1+x} ]]; then
    message_error  "Backup file name is not specified yet,
     it is a required parameter. make sure to choose one and try again."
    exit 1
fi

backup_filename="${BACKUP_DIR_PATH}/${1}"

if [[ ! -f "${backup_filename}" ]]; then
    message_error  "No backup with the specified filename was found.
     check out the maintenance script output to see if there in one and try again."
    exit 1
fi

message_welcome "Restoring the postgres '${POSTGRES_DB}' database from the '${backup_filename}' backup..."

if [[ "${POSTGRES_USER}" == "postgres" ]]; then
    message_error  "Restoring as 'postgres' is not allowed, Assign
    'POSTGRES_USER' env with another one and try again."
    exit 1
fi

export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}"

message_info "Terminating all connections to the '${PGDATABASE}' database..."

# SQL command to terminate all active connections to the target database
psql -v ON_ERROR_STOP=1 -c "
SELECT pg_terminate_backend(pg_stat_activity.pid)
FROM pg_stat_activity
WHERE pg_stat_activity.datname = '${PGDATABASE}'
  AND pid <> pg_backend_pid();
" || {
  message_error "Failed to terminate database connections."
  exit 1
}

message_info "Dropping the database..."

dropdb "${PGDATABASE}"

message_info "Creating a new database..."

createdb --owner="${POSTGRES_USER}"

message_info "Applying the backup to the new database..."

gunzip -c "${backup_filename}" | psql "${POSTGRES_DB}"

message_success "The '${POSTGRES_DB}' database has been restored successfully from the '${backup_filename}' backup"